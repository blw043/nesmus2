getDataWord:
    lda (dataPtr), y
    sta tmpvar
    iny
    bne getDataByte
    inc dataPtr+1
getDataByte:
    lda (dataPtr), y
incDataPtr:
    iny
    bne +
    inc dataPtr+1
+   rts

getLengthParam:
    and #$0F
    beq getDataByte
    rts
    
getIndexParam:
    and #$0F
    cmp #$0F
    beq getDataByte
    rts
    
releaseNote:
    lda nesmus.streamFlags, x
    ora #$03
    sta nesmus.streamFlags, x
    rts

cutNote:
    lda nesmus.streamFlags, x
    and #$FC
    sta nesmus.streamFlags, x
    rts
    
startNote:
    lda nesmus.streamFlags, x
    and #$FC
    ora #$02
    sta nesmus.streamFlags, x
    lda newNoteFlags
    ora streamBits.w, x
    sta newNoteFlags
    lda envVarsTable.w, x
    lsr
    bcs +
    tax
    jmp restartEnvelope
+   rts
    
updateNote:
    dec nesmus.streamTimer, x
    bne @return
    lda nesmus.streamTempo, x
    sta nesmus.streamTimer, x
    dec nesmus.noteTimer, x
    beq @reloadLength
@return
    rts
@reloadLength
    lda nesmus.noteLength, x
    sta nesmus.noteTimer, x
    lda #0
    sta dataPtr
    ldy nesmus.notePtrL, x
    lda nesmus.notePtrH, x
    sta dataPtr+1
nextNote:
    lda (dataPtr), y
    iny
    bne +
    inc dataPtr+1
+   sta tmpvar
    cmp #$F0
    bcc notes_00_EF
    jmp notes_F0_FF
notes_00_EF
    cmp #$80
    bcs note_80_EF
    cmp #$50
    bcc playNote
    cmp #$70
    bcs setNoteTimer
    cmp #$60
    bcs releaseRest
cutRest:
    jsr cutNote
    jmp setNoteTimer
    
releaseRest:
    jsr releaseNote
setNoteTimer:
    lda tmpvar
    jsr getLengthParam
    sta nesmus.noteTimer, x
commitNotePtr:
    ldx curStream
    tya
    sta nesmus.notePtrL, x
    lda dataPtr+1
    sta nesmus.notePtrH, x
    rts   
    
playNote:
    ; save value as note number
    lda tmpvar
    sta nesmus.curNote, x
    
    ; for sfx noise, just use note as is 
    cpx #7
    bcs @useNote
    
    cpx #3      
    beq @useDrum
    bcc @getPeriod  ; streams 0-2: use stream number as is
    dex             ; streams 4-6: decrement to get pitch var offset
    ; streams with pitch
    ; load X with offset for this stream's pitch variables
@getPeriod
    
    ; lookup 11-bit note period from table and add detune
    sty tmpvar+1 ; save y
    ldy tmpvar
    
    lda periodTableL.w, y
    clc
    adc nesmus.noteDetune, x
    sta nesmus.periodL, x
    
    lda #$7F                    ; sign extend detune from to 16 bits
    cmp nesmus.noteDetune, x    ; (carry is set if <= $7F)
    adc #$80
    lda #$FF
    adc periodTableH.w, y
    sta nesmus.periodH, x
    
    ldy tmpvar+1 ;restore y
    
+   ldx curStream
    ; set note state
@useNote
    jsr startNote
    jmp commitNotePtr
@useDrum
    sta nesmus.drumId ; use note number as drum envelope id
    beq @useNote    ; BRA
    
note_80_EF:
    cmp #$C0
    bcs note_C0_EF
    cmp #$A0
    bcs setNoteVolume

setNoteLength:
    cmp #$90
    and #$0F
    bne +
    jsr getDataByte
+   sta nesmus.noteTimer, x
    bcs +
    sta nesmus.noteLength, x
    jmp nextNote

setNoteVolume:
    and #$1F
    sta nesmus.noteVolume, x
-   jmp nextNote
    
    
note_C0_EF:
    cmp #$E0
    bcc setTempo
    
setEnvelopeOrSfxDuty:
    ldx curChannel
    cpx #2
    bcs -
    ldx curStream
    cpx #4
    lda tmpvar
    bcs setSfxDuty
    jsr getIndexParam
    sta tmpvar
    ldx curStream
    jsr setEnvelope
    ldx curStream
    jmp nextNote
setSfxDuty
    ror
    ror
    ror
    and #$C0
    sta nesmus.sfxDuty-4.w, x
+   jmp nextNote

setTempo:
    and #$1F
    sta nesmus.streamTempo, x
    sta nesmus.streamTimer, x
    jmp nextNote
    
notes_F0_FF:
    cmp #$F8
    bcs notes_F8_FF
    cmp #$F4
    bcs notes_F4_F7
    cmp #$F2
    bcs notes_F2_F3
    cmp #$F1
    bcs returnSub

callSub:
    jsr getDataWord
    sta tmpvar+1
    tya
    sta nesmus.noteRetPtrL, x
    lda dataPtr+1
    sta nesmus.noteRetPtrH, x
    lda tmpvar+1
    jmp +
noteJump:
    jsr getDataWord
+   sta dataPtr+1
    ldy tmpvar
    jmp nextNote
    
returnSub:
    ldy nesmus.noteRetPtrL, x
    lda nesmus.noteRetPtrH, x
    sta dataPtr+1
    jmp nextNote
    
notes_F2_F3
    cmp #$F3
    beq endLoop
beginLoop:
    jsr getDataByte
    sta nesmus.noteLoopCount, x
    tya
    sta nesmus.noteLoopPtrL, x
    lda dataPtr+1
    sta nesmus.noteLoopPtrH, x
    jmp nextNote
    
endLoop:
    dec nesmus.noteLoopCount, x
    beq +
    ldy nesmus.noteLoopPtrL, x
    lda nesmus.noteLoopPtrH, x
    sta dataPtr+1
+   jmp nextNote
    
notes_F4_F7:
    cmp #$F7
    beq noteJump
    cmp #$F5
    beq releaseDelay
    bcs holdDelay
cutDelay:
    jsr cutNote
    bne holdDelay  ; should be nonzero if stream is enabled
releaseDelay:
    jsr releaseNote
holdDelay:
    jsr getDataByte    
    sta nesmus.streamTimer, x
    lda #1
    sta nesmus.noteLength, x
    jmp commitNotePtr
    
notes_F8_FF:
    cmp #$FC
    bcs notes_FC_FF
pitchbendOff:
pitchbendVibrato:
pitchbendPortaUp:
pitchbendPortaDown:
    and #$03
    asl
    asl
    sta tmpvar
    lda nesmus.streamFlags, x
    and #%10000011
    ora tmpvar
    sta nesmus.streamFlags, x
    lda tmpvar
    bne pitchbendSetParams
    jmp nextNote
    
notes_FC_FF:
    cmp #$FF
    beq endStream
    cmp #$FD
    beq setSweep
    bcs setDetune
pitchbendSetParams:
    cpx #3
    bcs setDetune@done
    jsr getDataByte
    sta tmpvar
    and #$0F
    sta nesmus.pitchbendDelta, x
    lda tmpvar
    lsr
    lsr
    lsr
    lsr
    sta nesmus.pitchbendSpeed, x
    jmp setDetune@done
    
setSweep:
    jsr getSweepX
    bcs setDetune@done
    jsr getDataByte
    sta nesmus.pulseSweep, x
    jmp setDetune@done
    
setDetune:
    jsr getPitchX
    bcs @done
    jsr getDataByte
    sta nesmus.noteDetune, x
@done
    ldx curStream
    jmp nextNote
    
endStream:
    lda #0
    sta nesmus.streamFlags, x
    rts
    
 ; Note period tables:
 ;        A  A# B  C  C# D  D# E  F  F# G  G#
 ;           Bb       Db    Eb       Gb    Ab
 ; Oct 0: 00 01 02 03 04 05 06 07 08 09 0a 0b
 ; Oct 1: 0c 0d 0e 0f 10 11 12 13 14 15 16 17
 ; Oct 2: 18 19 1a 1b 1c 1d 1e 1f 20 21 22 23
 ; Oct 3: 24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
 ; Oct 4: 30 31 32 33 34 35 36 37 38 39 3a 3b
 ; Oct 5: 3c 3d 3e 3f 40 41 42 43 44 45 46 47
 ; Oct 6: 48 49 4a 4b 4c 4d 4e 4f
    
periodTableL:
    .db $f1, $7f, $13, $ad, $4d, $f3, $9d, $4c, $00, $b8, $74, $34   ;0 - $00
    .db $f8, $bf, $89, $56, $26, $f9, $ce, $a6, $80, $5c, $3a, $1a   ;1 - $0C
    .db $fb, $df, $c4, $ab, $93, $7c, $67, $52, $3f, $2d, $1c, $0c   ;2 - $18
    .db $fd, $ef, $e1, $d5, $c9, $bd, $b3, $a9, $9f, $96, $8e, $86   ;3 - $24
    .db $7e, $77, $70, $6a, $64, $5e, $59, $54, $4f, $4b, $46, $42   ;4 - $30
    .db $3f, $3b, $38, $34, $31, $2f, $2c, $29, $27, $25, $23, $21   ;5 - $3C
    .db $1f, $1d, $1b, $1a, $18, $17, $15, $14                       ;6 - $48
    
periodTableH:
    .db $07, $07, $07, $06, $06, $05, $05, $05, $05, $04, $04, $04  
    .db $03, $03, $03, $03, $03, $02, $02, $02, $02, $02, $02, $02
    .db $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
    .db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
    .db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
    .db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
    .db $00, $00, $00, $00, $00, $00, $00, $00
    