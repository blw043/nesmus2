.rombankmap
    bankstotal 2
    banksize $10
    banks 1 ; dummy bank for iNES header
    banksize $8000
    banks 1
.endro

.memorymap
    defaultslot 1
    slot 0 $0000 size $10   ; dummy slot for iNES header
    slot 1 $8000 size $8000
.endme

.bank 0 slot 0
; iNES header - NROM with 32k PRG and no CHR
.db "NES", $1A, $02, $00, $00, $00
.db 0,0,0,0,0,0,0,0

.bank 1 slot 1
.orga $8000


.define nmicounter $10
.enum $20
    joypad          db
    prevJoypad      db
    joypadInv       db
    prevJoypadInv   db
.ende

reset:
    sei
    ldx #$FF
    txs
    inx
    txa
    sta nmicounter
    jsr nesmus.initEngine
    jsr waitForVblank
    jsr waitForVblank
    jsr waitForVblank
    lda #0
    jsr playMusic
@loop:
    jsr waitForNMI
    jsr fetchJoypad
    ldx #1
    jsr readJoypad
    lda prevJoypadInv
    and joypad
    sta $01
    bpl +
    lda #0
    jsr playSfx
+   asl $01
    bpl +
    lda #1
    jsr playSfx
+   asl $01
    bpl +
    lda #2
    jsr playSfx
+   asl $01
    bpl +
    lda #3
    jsr playSfx
+   jmp @loop
   
waitForVblank:
    bit $2002
-   bit $2002
    bpl -
    rts
    
waitForNMI:
    lda nmicounter
    cmp $2002
    ldx #$80
    stx $2000
-   cmp nmicounter
    beq -
    rts
    
fetchJoypad:
    ldy #1
    sty $4016
    dey
    sty $4016
    rts
    
readJoypad:
    lda joypad
    sta prevJoypad
    eor #$FF
    sta prevJoypadInv
    ldy #8
-   lda $4016
    lsr
    rol joypad
    dey
    bne -
    lda joypad
    eor #$FF
    sta joypadInv
    rts
    
playSfx:
    tay
    ldx sfxStreams.w, y
    asl
    tay
    lda sfxTable.w, y
    sta nesmus.notePtrL.w, x
    lda sfxTable+1.w, y
    sta nesmus.notePtrH.w, x
    jsr nesmus.stopStream
    jmp nesmus.startStream
    
playMusic:
    asl
    sta $F0
    tay
    ldx #3
@loop
    lda musicTablesL.w, x
    sta $FE
    lda musicTablesH.w, x
    sta $FF
    ldy $F0
    lda ($FE), y
    sta nesmus.notePtrL.w, x
    iny
    lda ($FE), y
    sta nesmus.notePtrH.w, x
    jsr nesmus.stopStream
    jsr nesmus.startStream
    dex
    bpl @loop
    rts
    
    
nmi:
    inc nmicounter
    pha
    txa
    pha
    tya
    pha
    lda #0                  ; disable further NMIs
    sta $2000
    jsr nesmus.updateEngine ; update sound
    pla
    tay
    pla
    tax
    pla
    rti

musicTablesL:
    .db <musicTable0
    .db <musicTable1
    .db <musicTable2
    .db <musicTable3
musicTablesH:
    .db >musicTable0
    .db >musicTable1
    .db >musicTable2
    .db >musicTable3
    
sfxTable:
    .dw sfx0, sfx1, sfx2, sfx3
    
sfxStreams: .db 4, 5, 7, 4
    
musicTable0:
    .dw music.0.pulse1
musicTable1:
    .dw music.0.pulse2
musicTable2:
    .dw music.0.triangle
musicTable3:
    .dw music.0.noise
    
nesmus.envelopeTable:
    .dw envelope.0
    .dw envelope.1
    .dw envelope.2
    .dw envelope.3
    .dw envelope.4
    .dw envelope.5
    .dw envelope.6
    
envelope.0: .db $0F,$FF
envelope.1: .db $4F,$FF
envelope.2: .db $8F,$FF
envelope.3: .db $CF,$FF
envelope.4: .db $48,$48,$46,$45,$44,$FF,$41,$FF
envelope.5: .db $89,$86,$85,$83,$82,$81,$FF
envelope.6: .db $49,$48,$47,$46,$46,$45,$45,$43,$FF,$41,$FF


nesmus.envReleaseOffsTable:  
    .db $01, $01, $01, $01, $06, $05, $09

nesmus.drumTable:
    .dw drum.0
    .dw drum.1
    .dw drum.2
    
    
drum.0:
    .db $71, $61, $1C, $59, $C7, $E5, $F4, $F3, $23, $F2, $F1, $02
drum.1:
    .db $61, $C1, $C6, $D4, $D2, $E1, $02, $02
drum.2:
    .db $61, $41, $36, $34, $22, $21, $02, $02
    
nesmus.drumReleaseOffsTable:
    .db $0A
    
music.0.pulse2:
    .db $a7, 
    .db $CC, $E6, 
@r  .db $71, $F0, <music.0.pulse1@s0, >music.0.pulse1@s0, $23, $96, $20, $1e, $20
    .db $94, $22, $61, $1b, $c8, $1b, $1e, $22, $96, $27, $82, $27, $26, $27
    .db $96, $29, $22, $26, $29, $cc, $96, $2a, $81, $c8, $28, $26, $23, $cc
    .db $F0, <music.0.pulse1@s0, >music.0.pulse1@s0, $24, $96, $20, $c8, $20, $1E, $20
    .db $c6, $93, $21, $20, $98, $20, $c8, $20, $22, $24, $96, $25, $82, $20, $1e, $1c, 
    .db $cc, $84, $1b, $14, $17, $82, $1b, $17, $19, $7D
    
    .db $F7
    .dw @r
    
music.0.pulse1:
    .db $CC, $E6
@r  .db $F0, <@s0, >@s0, $23, $96, $20, $1e, $20
    .db $94, $22, $61, $1b, $c8, $1b, $1e, $22, $96, $27, $82, $27, $26, $27
    .db $96, $29, $22, $26, $29, $cc, $96, $2a, $81, $c8, $28, $26, $23, $cc
    .db $F0, <@s0, >@s0, $24, $96, $20, $c8, $20, $1E, $20
    .db $c6, $93, $21, $20, $98, $20, $c8, $20, $22, $24, $96, $25, $82, $20, $1e, $1c, 
    .db $cc, $84, $1b, $14, $17, $82, $1b, $17, $19, $7E
    
    .db $F7
    .dw @r
    
@s0
    .db $86, $25, $81, $28, $2a, $94, $2c, $2d, $2c, $2a, $28
    .db $93, $27, $25, $93, $27, $F1
    
    
music.0.triangle:
  
@r  .db $C1, $84, $F0, <@s0, >@s0, $F0, <@s1, >@s1, $F0, <@s0, >@s0
    .db $F2, $04, $14, $58, $14, $52, $14, $52, $F3
    .db $F2, $04, $19, $58, $19, $52, $19, $52, $F3
    .db $F2, $02, $17, $58, $17, $52, $17, $52, $F3
    .db $F2, $02, $14, $58, $14, $52, $14, $52, $F3
    .db $F2, $04, $17, $58, $17, $52, $17, $52, $F3
    .db $F2, $04, $19, $58, $19, $52, $19, $52, $F3
    .db $c6, $83, $19, $51, $1c, $51, $1b, $51, $17, $51 
    .db $F7
    .dw @r
    
@s0 .db $F2, $08, $19, $58, $19, $52, $19, $52, $F3
    .db $F2, $04, $17, $58, $17, $52, $17, $52, $F3
    .db $F2, $04, $14, $58, $14, $52, $14, $52, $F3, $F1
    
@s1 .db $F2, $08, $1B, $58, $1B, $52, $1B, $52, $F3
    .db $F2, $04, $22, $58, $22, $52, $22, $52, $F3
    .db $F2, $04, $1e, $58, $1e, $52, $1e, $52, $F3, $F1
    
music.0.noise:
    .db $C6, 
@r  .db $81, $F2, $22, $02, $51, $01, $01, $00, $51, $01, $01, $F3
    .db $84, $02, $02, $02, $92, $00, $81, $01, $01
    .db $F7
    .dw @r
    
sfx0:
    .db $E2, $82, $25, $E1, $28, $2C, $30, $40, $84, $20, $25, $28, $30, $FF
sfx1:
    .db $E1, $8F, $14, $A7, $7C, $AF, $86, $15, $85, $16, $17, $18, $FF
sfx2:
    .db $87, $AB, $0D, $85, $05, $08, $0A, $0C, $0D, $FF
sfx3:
    .db $E2, $FD, $DA, $14, $7F, $FF ; this one uses hardware sweep which is currently buggy
    
.orga $FFFA
.section "vectors" size 6 force
    .dw nmi
    .dw reset
    .dw reset
.ends