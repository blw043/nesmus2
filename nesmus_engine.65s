streamBits: .db $1, $2, $4, $8, $10, $20, $40, $80
; loads X with the index of current stream's envelope vars.
; carry clear if stream has envelope, set otherwise
envVarsTable:   .db %000, %0010, %001, %100, %001, %001, %001, %001

; 17-28 cycles
getEnvelopeX:
    lda envVarsTable.w, x
    lsr
    tax
    stx envX
    rts
    
; loads X with the index of current stream's pitch vars.
pitchVarsTable:
    .db %0000, %0010, %0100, %0001, %0110, %1000, %1010, %0001
getPitchX:
    lda pitchVarsTable.w, x
    lsr
    tax
    stx pitchX
+   rts
    
sweepVarsTable:
    .db %0000, %0010, %0001, %0001, %0100, %0110, %0001, %0001
getSweepX:
    lda sweepVarsTable.w, x
    lsr
    tax
    stx sweepX
+   rts
    
; ====================
;  start of public API
; ====================

; Initializes a stream. (X = stream number)
stopStream:
    lda #1
    sta nesmus.streamTimer, x
    sta nesmus.streamTempo, x
    sta nesmus.noteLength, x
    sta nesmus.noteTimer, x
    lda #0
    sta nesmus.streamFlags, x
    lda #$0F
    sta nesmus.noteVolume, x
    lda sweepVarsTable.w, x
    lsr
    bcs @resetDetune
    tay
    lda #$0F
    sta nesmus.pulseSweep, y
@resetDetune
    lda pitchVarsTable.w, x
    lsr
    bcs @done
    tay
    lda #0
    sta nesmus.noteDetune, y
@done
    rts
    
setEnvelope:
    sta tmpvar
    lda envVarsTable.w, x
    lsr
    bcs +
    tax
    lda tmpvar
    sta nesmus.envId, x
    rts
    
restartEnvelope:
    lda #1
    sta nesmus.envTimer, x
    lda #0
    sta nesmus.envOffs, x
    cpx #2
    bne +
    sta nesmus.drumBytes
+   rts

; starts a stream.
startStream:
    lda #$80 ; set enable bit
    sta nesmus.streamFlags, x
    rts
    
pauseStream:
    lda nesmus.streamFlags, x
    and #$7F
    sta nesmus.streamFlags, x
    rts
    
initEngine:
; initialize PSG registers
    lda #$40 
    sta $4017
    ldx #$03   
-   lda initialOutput.w, x
    sta $4000, x
    sta $4004, x
    sta $4008, x
    sta $400C, x
    dex
    bpl -
    lda #$0F
    sta $4015
    sta nesmus.prevPulseSweep
    sta nesmus.prevPulseSweep+1
    sta nesmus.prevPeriodH
    sta nesmus.prevPeriodH+1
; initialize streams
    ldx #7
-   stx curStream
    jsr stopStream
    lda #$0F
    sta nesmus.streamVolume, x
    dex
    bpl -
    rts
initialOutput:
    .db $30, $0F, $00, $80
    

updateEngine:
    ldx #7
    lda #0
    sta outputMask
    sta newNoteFlags
@loop
    stx curStream             ; get channel & output offset
    txa
    and #3
    sta curChannel
    asl
    asl
    sta outputOffs
    lda nesmus.streamFlags, x ; skip stream if disabled
    bpl @nextStream
    jsr updateNote
    lda nesmus.streamFlags, x ; note state may have changed. reload it
    bpl @nextStream           ; if still enabled, continue
    and #%0011                ; if note off, continue
    beq @nextStream
    jsr updateEffects         ; update envelope and pitch effects, if applicable
@nextStream
    jsr outputStream
    ldx curStream
    dex
    bpl @loop
    rts
    
; effect mask determines which effects this stream supports.
;   d0: 1 = envelope supported, 0 = not supported
;   d1: 1 = pitchbend supported, 0 = not supported
updateEffects:
    cpx #4
    bcs @done
    cpx #2
    beq +
    jsr updateEnvelope
    ldx curStream
+   cpx #3
    beq @done
    jsr updatePitchbend
    ldx curStream
@done
    rts