releaseEnvelope:                            ; get saved envelope var offset
    ldy nesmus.envId, x                     ; use envelope id as index
    lda nesmus.envReleaseOffsTable.w, y     ; use pulse envelope as default
    cpx #2                                  ; override if drum envelope
    bcc +
    lda nesmus.drumReleaseOffsTable.w, y
+   sta nesmus.envOffs, x                   ; save new offset
    dec nesmus.streamFlags, x               ; decrement note state
    jmp updateEnvelope@getEnvPtr
-   rts
updateEnvelope:
    lda nesmus.streamFlags, x   ; check note state
    and #3
    cmp #2                      ; if note in "off" or "held" state, return
    bcc -
    cpx #3                      ; for drum channel, decrement to get envelope var offset
    bne +
    dex
+   cmp #3
    beq releaseEnvelope
    dec nesmus.envTimer, x      ; decrement envelope timer
    bne -                       ; return if not expired
@getEnvPtr
    lda nesmus.envId, x ; use envelope id (for drums, this equals the current note) as pointer-table index
    asl
    tay
    cpx #2
    beq updateDrumEnvelope ; branch for noise channel
    lda nesmus.envelopeTable.w, y
    sta dataPtr
    lda nesmus.envelopeTable+1.w, y
    sta dataPtr+1
    ldy nesmus.envOffs, x
nextEnvCmd:
    lda (dataPtr), y    ; get next command byte
    iny
    cmp #$FD
    bcc @readEnvValue
    cmp #$FF
    beq env.holdValue
    cmp #$FE
    bne env.cutNote
    lda (dataPtr), y
    tay
    jmp nextEnvCmd
@readEnvValue:
    sta tmpvar          ; save command
    and #$CF            ; save envelope value
    sta nesmus.envValue, x
    inc nesmus.envTimer, x  ; default envelope timer = 1 frame
    lda tmpvar          ; d4 set -> read length byte
    and #$10
    beq +
    lda (dataPtr), y
    iny
    sta nesmus.envTimer, x
+   tya
    sta nesmus.envOffs, x   ; save envelope offset
    ldx curStream
    rts
    
env.holdValue:
    ldx curStream
    lda nesmus.streamFlags, x
    and #$FC
    ora #1
    sta nesmus.streamFlags, x
    rts
    
env.cutNote:
    ldx curStream
    jsr cutNote
    rts
    
updateDrumEnvelope:
    lda nesmus.drumTable.w, y   ; get envelope pointer from drum table
    sta dataPtr
    lda nesmus.drumTable+1.w,y
    sta dataPtr+1
    ldy nesmus.drumOffs
nextDrumEnv:
    lda nesmus.drumBytes    ; more bytes in this chunk?
    beq drumChunkHeader     ; if not, read chunk header
    lda nesmus.drumLength   ; reload length
readDrumValue:
    dec nesmus.drumBytes
    sta nesmus.drumTimer    
    lda (dataPtr), y        ; get next envelope value
    iny
    sta nesmus.drumValue
    sty nesmus.drumOffs
    rts
drumChunkHeader:
    lda (dataPtr), y        ; else read chunk header byte
    beq env.holdValue       ; zero -> we're done, hold last value
    cmp #$10                ; $00-$0F -> special commands
    bcc +
    iny
    sta tmpvar
    lsr                     ; else: byte count in upper nybble
    lsr
    lsr
    lsr
    sta nesmus.drumBytes
    lda tmpvar              ; frame count in lower nybble
    and #$0F
    sta nesmus.drumLength
    bne readDrumValue       ; unconditional branch
+   and #3                  ; only use low 2 bits
    jump_table drumCmds, tmpvar+1

drumCmds:
    .dw env.holdValue    -1
    .dw drum.setOffs     -1
    .dw env.cutNote      -1
    .dw env.holdValue    -1
    
drum.setOffs:
    iny
    lda (dataPtr), y
    tay
    jmp nextDrumEnv    
    
updatePitchbend:
    ldx curStream
    lda nesmus.streamFlags, x
    and #PFX_MASK
    bne @enabled
@return
    rts
@enabled
    sta tmpvar
    ; decrement pitchbend timer
    dec nesmus.pitchbendTimer, x
    bne @return
    lda nesmus.pitchbendSpeed, x
    sta nesmus.pitchbendTimer, x
    
    lda tmpvar
    cmp #PFX_VIBRATO
    beq updateVibrato
    cmp #PFX_PORTA_DOWN
    beq pitchbendDown
    cmp #PFX_PORTA_UP
    beq pitchbendUp
    
pitchbendDown:
    lda nesmus.pitchbendDelta, x
    jmp addPeriod
    
; this creates a 4-phase vibrato cycle
updateVibrato:
    lda nesmus.streamFlags, x
    adc #%00001111      ; carry is set here
    and #%00110000
    sta tmpvar
    lda nesmus.streamFlags, x
    and #%11001111
    ora tmpvar
    sta nesmus.streamFlags, x
    lda tmpvar
    cmp #%00100000
    bcs pitchbendDown
    ; jmp pitchbendUp
    
pitchbendUp:
    lda nesmus.pitchbendDelta, x
    ; jmp subtractPeriod
    
subtractPeriod:
    sta tmpvar
    sec
    lda nesmus.periodL, x
    sbc tmpvar
    bcs +
    sta tmpvar
    lda nesmus.periodH, x
    beq +
    sbc #0
    sta nesmus.periodH, x
    lda tmpvar
+   sta nesmus.periodL, x
    rts
    
addPeriod:
    clc
    adc nesmus.periodL, x
    bcc ++
    lda nesmus.periodH, x
    adc #0
    cmp #8
    bcc +
    lda #$07
+   sta nesmus.periodH, x
    lda #$FF 
++  sta nesmus.periodL, x
    rts
    
    